<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   width="860" height="600" creationComplete="windowedapplication1_creationCompleteHandler(event)" xmlns:controls="controls.*" xmlns:local="*">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import mx.collections.*;
			
			import spark.effects.Fade;
			include "FacebookGraph.as";
			
			var beginType:Boolean = false; // toggled once when the user clicks the search box
			
			// dummy function for testing
			protected function dummyLogin(event:MouseEvent):void {
				currentState = "loggedin";
			}
			
			protected function searchboxClick(event:MouseEvent):void {
				if(!beginType) {
					searchbox.text = "";
					searchbox.setStyle("color", "#000000");
					beginType = true;
				}
			}
			
			protected function conductSearch(event:KeyboardEvent):void {
				
				if(event.keyCode == 13) {
					spinner.visible = true;
					searchUser(searchbox.text, 0, function() { // CALLBACK FROM SEARCH
						spinner.visible = false;
						var fd:spark.effects.Fade = new Fade(filtersgroup);
						if(filtersgroup.visible == false) {
							fd.alphaFrom = 0;
							fd.alphaTo = 1;
							fd.duration = 1500;
							fd.play();
						}
						
						// loop through resultset and add configure filters
						var locations:Dictionary = new Dictionary();
						var educations:Dictionary = new Dictionary();
						
						var locSize = 0;
						var edsSize = 0;
						trace("users! is "+users);
						for(var i=0;i<users.length;i++) {
							var loc = users.getItemAt(i).location;
							var eds = users.getItemAt(i).education;
							
							trace(users.getItemAt(i).name+": "+loc+", "+users.getItemAt(i).network+", "+eds);
							if(loc != "") {
								if(!locations[loc]) {
									trace("creating new bucket for key "+loc);
									locations[loc] = new ArrayList();
									locSize++;
								}
								locations[loc].addItem(users.getItemAt(i));
								trace(locations[loc]+" and "+locations.length);
							}
							if(eds != null) {
								for(var j=0;j<eds.length;j++) {
									if(!educations[eds[j].name]) {
										trace("creating new bucket for key "+eds[j].name);
										educations[eds[j].name] = new ArrayList();
										edsSize++;
									}
									educations[eds[j].name].addItem(users.getItemAt(i));
								}
							}

						}
						
						trace("after loop educations is "+educations);
						
						var sortedKeysLoc:Array = rankSort(locations, locSize);
						trace("sortedkeys location: "+sortedKeysLoc+", length"+sortedKeysLoc.length);
						
						updateFilterDisplays(sortedKeysLoc, [loc1, loc2, loc3, loc4]);
						
						updateFilterDisplays(rankSort(educations, edsSize), [ed1, ed2, ed3, ed4], "eds");
						
						// display results in circle
						var circle:CircleContainer = new CircleContainer(100, 100, 100);
						circleArea.addChild(circle);
						for(var i:int = 0; i < users.length; i++) {
							circle.addItem(users.getItemAt(i));
						}
						circle.drawItems();

					}); // end search user callback
				}
			}
			
			/**
			 * Returns an array of keys whose ordering corresponds to the ranking of values in dict.
			 */
			private function rankSort(dict:Dictionary, size:int):Array {
				// sort locations by size of list			
				var sortedKeys:Array = new Array();
				
				// loop through each element, ignoring ones we've seen before
				while(sortedKeys.length < size) {
					var currMax = -1;
					var currKey = null;
					for(var key in dict) {
						if(sortedKeys.indexOf(key) == -1) {
							// find the max of the ones we see now
							if(dict[key].length > currMax) {
								currMax = dict[key].length;
								currKey = key;
							}
						}
					}
					// add this as the next element to sortedKeys
					sortedKeys.push(currKey);
				}
				
				return sortedKeys;
			}
			
			/**
			 * Updates the filters based on orderings array.
			 * Inputs are the input fields to be updated.
			 */
			private function updateFilterDisplays(ordering:Array, inputs:Array, specialType:String = null):void {
				if(ordering.length >= 1) {
					inputs[0].label = ordering[0];
					inputs[0].visible = true;
				} else {
					inputs[0].visible = false;
				}
				if(ordering.length >= 2) {
					inputs[1].label = ordering[1];
					inputs[1].visible = true;
				} else {
					inputs[1].visible = false;
				}
				if(ordering.length >= 3) {
					inputs[2].label = ordering[2];
					inputs[2].visible = true;
				} else {
					inputs[2].visible = false;
				}
				if(ordering.length >= 4) {
					var loc4List:ArrayCollection = new ArrayCollection();
					for(var i=3;i<ordering.length;i++) {
						if(specialType == "eds") {
							trace(ordering[i]);
							loc4List.addItem({label: ordering[i], data: ordering[i]});
						} else {
							loc4List.addItem({label: ordering[i], data: ordering[i]});
						}
					}
					inputs[3].dataProvider = loc4List;
				} else {
					inputs[3].visible = false;
				}
			}
		]]>
	</fx:Script>
	<s:states>
		<s:State name="loggedout"/>
		<s:State name="loggedin"/>
	</s:states>
	<s:Button id="loginoutBtn" right="10" label="Log In" skinClass="skins.FBLogoutButtonSkin" 
			  right.loggedin="10" bottom.loggedin="10" label.loggedin="Log Out"
			  skinClass.loggedin="skins.FBLogoutButtonSkin"
			  right.loggedout="385" top.loggedout="349" label.loggedout="Log In"
			  click.loggedout="login(event)" click.loggedin="logout(event)" 
			  skinClass.loggedout="skins.FBLoginButtonSkin"/>
	<s:Label x="20" y="20"
			 color="#3B5998" fontFamily="Verdana" fontSize="36"
			 fontWeight="bold" text="face"/>
	<s:Label color="#666666" fontFamily="Verdana" fontSize="30" text="+"
			 x="104" y="22"/>
	<s:Label includeIn="loggedout" x="190" y="272" color="#888888" fontFamily="Helvetica Neue Light"
			 fontSize="36" text="You are currently not logged in."/>
	<s:Label includeIn="loggedout" x="363" y="379" color="#AAAAAA" fontFamily="Helvetica Neue Light"
			 fontSize="12" text="Please login to Facebook."/>
	
	<s:TextInput includeIn="loggedin" y="10" right="20" width="692" color="#DDDDDD" id="searchbox"
				 fontFamily="Helvetica Neue Light" fontSize="32" text="Who do you want to find?" click="searchboxClick(event)" keyDown="conductSearch(event)"/>
	<mx:Box y="18" right="40" horizontalAlign="center" verticalAlign="middle" includeIn="loggedin">
		<controls:Spinner id="spinner" tickColor="#cccccc" visible="false"/>
	</mx:Box>
	
	<s:Group id="filtersgroup" visible="false">
		<s:Label includeIn="loggedin" x="12" y="93" fontFamily="Helvetica Neue Light" fontSize="18"
				 text="Filter your results"/>
		<s:Image includeIn="loggedin" x="19" y="124" source="images/graduation-hat.png"/>
		<s:Label includeIn="loggedin" x="37" y="124" fontFamily="Helvetica Neue Light" fontSize="14"
				 text="Education"/>
		<s:Image includeIn="loggedin" x="19" y="271" source="images/marker.png"/>
		<s:Label includeIn="loggedin" x="37" y="270" fontFamily="Helvetica Neue Light" fontSize="14"
				 text="Location"/>
		<s:Image includeIn="loggedin" x="19" y="420" source="images/briefcase.png"/>
		<s:Label includeIn="loggedin" x="37" y="419" fontFamily="Helvetica Neue Light" fontSize="14"
				 text="Workplace"/>
		<s:CheckBox id="ed1" includeIn="loggedin" x="37" y="149" label="Columbia"
					fontFamily="Helvetica Neue Light"/>
		<s:CheckBox id="ed2" includeIn="loggedin" x="37" y="169" label="NYU"
					fontFamily="Helvetica Neue Light"/>
		<s:CheckBox id="ed3" includeIn="loggedin" x="37" y="189" label="Brown"
					fontFamily="Helvetica Neue Light"/>
		<s:ComboBox id="ed4" includeIn="loggedin" x="38" y="216" width="105" fontFamily="Helvetica Neue Light">
			
		</s:ComboBox>
		<s:CheckBox id="loc1" includeIn="loggedin" x="37" y="289" label="New York, NY"
					fontFamily="Helvetica Neue Light"/>
		<s:CheckBox id="loc2" includeIn="loggedin" x="37" y="309" label="Boston, MA" fontFamily="Helvetica Neue Light"/>
		<s:CheckBox id="loc3" includeIn="loggedin" x="37" y="329" label="Washington, D.C." fontFamily="Helvetica Neue Light"/>
		<s:ComboBox id="loc4" includeIn="loggedin" x="38" y="356" width="105" fontFamily="Helvetica Neue Light">
			
		</s:ComboBox>
		<s:CheckBox includeIn="loggedin" x="37" y="441" label="Microsoft"
					fontFamily="Helvetica Neue Light"/>
		<s:CheckBox includeIn="loggedin" x="37" y="461" label="Google" fontFamily="Helvetica Neue Light"/>
		<s:CheckBox includeIn="loggedin" x="37" y="481" label="Apple" fontFamily="Helvetica Neue Light"/>
		<s:ComboBox includeIn="loggedin" x="38" y="508" width="105" fontFamily="Helvetica Neue Light"
					itemRenderer="educationRenderer">
			<mx:ArrayList>
				<fx:String>Cornell</fx:String>
				<fx:String>MIT</fx:String>
				<fx:String>Harvard</fx:String>
				<fx:String>Dartmouth</fx:String>
				<fx:String>Penn</fx:String>
				<fx:String>Yale</fx:String>
				<fx:String>Princeton</fx:String>
			</mx:ArrayList> 
		</s:ComboBox>
	</s:Group>
	<mx:Canvas id="circleArea" width="600" height="400" x="200" y="100" borderColor="0xCCCCCC" borderVisible="true" borderStyle="solid">
		
	</mx:Canvas>
</s:WindowedApplication>
