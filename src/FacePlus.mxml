<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   width="860" height="600" creationComplete="windowedapplication1_creationCompleteHandler(event)" xmlns:controls="controls.*" xmlns:local="*">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import flash.utils.getQualifiedClassName;
			
			import mx.collections.*;
			
			import spark.components.*;
			import spark.effects.Fade;
			
			include "FacebookGraph.as";
			
			var beginType:Boolean = false; // toggled once when the user clicks the search box
			
			// global vars for the circles
			var noMutualsCircle:CircleContainer;
			var outerCircle:CircleContainer;
			var innerCircle:CircleContainer;
			var friendCircle:CircleContainer;
			
			var CENTER_X = 140;
			var CENTER_Y = 120;
			
			// dummy function for testing
			protected function dummyLogin(event:MouseEvent):void {
				currentState = "loggedin";
			}
			
			protected function searchboxClick(event:MouseEvent):void {
				if(!beginType) {
					searchbox.text = "";
					searchbox.setStyle("color", "#000000");
					beginType = true;
				}
			}
			
			protected function conductSearch(event:KeyboardEvent):void {
				
				if(event.keyCode == 13) {
					spinner.visible = true;
					searchUser(searchbox.text, 0, searchCallback); // end search user callback
				}
			}
			
			protected function searchCallback() { // CALLBACK FROM SEARCH
				spinner.visible = false;
				nextResultsButton.visible = true;
				var fd:spark.effects.Fade = new Fade(filtersgroup);
				if(filtersgroup.visible == false) {
					fd.alphaFrom = 0;
					fd.alphaTo = 1;
					fd.duration = 1500;
					fd.play();
				}
				
				// loop through resultset and add configure filters
				var locations:Dictionary = new Dictionary();
				var educations:Dictionary = new Dictionary();
				var workplaces:Dictionary = new Dictionary();
				
				var locSize = 0;
				var edsSize = 0;
				var workSize = 0;
				for(var i=0;i<users.length;i++) {
					var loc = users.getItemAt(i).location;
					var eds = users.getItemAt(i).education;
					var works = users.getItemAt(i).work;
					
					if(loc != "") {
						if(!locations[loc]) {
							locations[loc] = new ArrayList();
							locSize++;
						}
						locations[loc].addItem(users.getItemAt(i));
						trace(locations[loc]+" and "+locations.length);
					}
					if(eds != null) {
						for(var j=0;j<eds.length;j++) {
							if(!educations[eds[j].name]) {
								educations[eds[j].name] = new ArrayList();
								edsSize++;
							}
							educations[eds[j].name].addItem(users.getItemAt(i));
						}
					}
					if(works != null) {
						for(var j=0;j<works.length;j++) {
							if(!workplaces[works[j].employerName]) {
								workplaces[works[j].employerName] = new ArrayList();
								workSize++;
							}
							workplaces[works[j].employerName].addItem(users.getItemAt(i));
						}
					}
					
				}
				
				var sortedKeysLoc:Array = rankSort(locations, locSize);
				updateFilterDisplays(sortedKeysLoc, locgroup, (myLocation == null ? [] : [myLocation]));
				
				updateFilterDisplays(rankSort(educations, edsSize), edgroup, myEducation);
				updateFilterDisplays(rankSort(workplaces, workSize), workgroup, myWorkplaces);
				
				
				// reset circleArea and display results in circles
				while(circleArea.numChildren > 0) {
					circleArea.removeChildAt(0);
				}
				
				noMutualsCircle = new CircleContainer(CENTER_X, CENTER_Y, 220);
				circleArea.addChild(noMutualsCircle);
				for(var i:int = 0; i < noMutuals.length; i++) {
					noMutualsCircle.addItem(noMutuals.getItemAt(i));
				}
				noMutualsCircle.drawItems();
				
				outerCircle = new CircleContainer(CENTER_X, CENTER_Y, 180);
				circleArea.addChild(outerCircle);
				for(var i:int = 0; i < outer.length; i++) {
					outerCircle.addItem(outer.getItemAt(i));
				}
				outerCircle.drawItems();
				
				innerCircle = new CircleContainer(CENTER_X, CENTER_Y, 140);
				circleArea.addChild(innerCircle);
				for(var i:int = 0; i < inner.length; i++) {
					innerCircle.addItem(inner.getItemAt(i));
				}
				innerCircle.drawItems();
				
				friendCircle = new CircleContainer(CENTER_X, CENTER_Y, 100);
				circleArea.addChild(friendCircle);
				for(var i:int = 0; i < friends.length; i++) {
					friendCircle.addItem(friends.getItemAt(i));
				}
				friendCircle.drawItems();
				
			}
			
			protected function nextResultHandler(event:MouseEvent):void {
				nextResults(searchCallback);
			}
			
			protected function handleFilter(event:Event):void {
				var allFilters:Array = locgroup.getChildren();
				for(var i=0;i<edgroup.getChildren().length;i++) {
					allFilters.push(edgroup.getChildAt(i));
				}
				for(var i=0;i<workgroup.getChildren().length;i++) {
					allFilters.push(workgroup.getChildAt(i));
				}
				for(var i=0;i<allFilters.length;i++) {
					if(getQualifiedClassName(allFilters[i]) != "spark.components::CheckBox") {
						allFilters.splice(i, 1);
					}
				}
				
				var atLeastOneSelected:Boolean = false; // if no filter has been selected, display everything
				for(var i=0;i<allFilters.length;i++) {
					if(allFilters[i].selected) {
						atLeastOneSelected = true;
						break;
					}
				}				
				if(atLeastOneSelected) {
					bigloop: for(var i=0;i<circleArea.numChildren;i++) {
						if(getQualifiedClassName(circleArea.getChildAt(i)) == "spark.components::Label") {
							var currName = (circleArea.getChildAt(i) as spark.components.Label).text.replace("\n", " "); // the current person we're testing
							// loop through users. when we come across currName, if he's not part of the location/ed/workplace, then we hide the current child
							innerloop: for(var j=0;j<users.length;j++) {
								var currUser:User = users.getItemAt(j) as User;
								if(currUser.name == currName) {
									var hideThisUser:Boolean = true;
									for(var k=0;k<allFilters.length;k++) {
										
										// check to see if our current filter matches any of this person's properties
										//trace("currchild is "+i+" curruser.location is "+currUser.location+" and label is "+allLocs[k].label+" and selected is "+allLocs[k].selected);
										
										if(currUser.location == allFilters[k].label && allFilters[k].selected) {
											hideThisUser = false;
										} else {
											// gotta loop through education and work array
											for(var m=0;m<currUser.education.length;m++) {
												if(currUser.education[m].name == allFilters[k].label && allFilters[k].selected) {
													hideThisUser = false;
												}
											}
											for(var m=0;m<currUser.work.length;m++) {
												if(currUser.work[m].employerName == allFilters[k].label && allFilters[k].selected) {
													hideThisUser = false;
												}
											}
										}
										
									}
									trace("child "+i+" has label "+currName+". we are testing against user "+currUser.name+" who has location "+currUser.location+". hidethisuser is "+hideThisUser);
									if(hideThisUser == false) {
										circleArea.getChildAt(i).visible = true;
										break innerloop;
									}
									if(hideThisUser == true) {
										circleArea.getChildAt(i).visible = false;
									}
									//break; // once we've encountered one.. break out
								} // end check to find the current label's User
							} // end loop through users
						} //end check to see if current child is a label 
					} // end loop through children
				} else { // if nothing is selected, display 'em all
					for(var i=0;i<circleArea.numChildren;i++) {
						if(getQualifiedClassName(circleArea.getChildAt(i)) == "spark.components::Label") {
							circleArea.getChildAt(i).visible = true;
						}
					}
				}
			}
			
			/**
			 * Returns an array of keys whose ordering corresponds to the ranking of values in dict.
			 */
			private function rankSort(dict:Dictionary, size:int):Array {
				// sort locations by size of list			
				var sortedKeys:Array = new Array();
				
				// loop through each element, ignoring ones we've seen before
				while(sortedKeys.length < size) {
					var currMax = -1;
					var currKey = null;
					for(var key in dict) {
						if(sortedKeys.indexOf(key) == -1) {
							// find the max of the ones we see now
							if(dict[key].length > currMax) {
								currMax = dict[key].length;
								currKey = key;
							}
						}
					}
					// add this as the next element to sortedKeys
					sortedKeys.push(currKey);
				}
				
				return sortedKeys;
			}
			
			/**
			 * Updates the filters based on orderings array.
			 * Inputs are the input fields to be updated.
			 */
			private function updateFilterDisplays(ordering:Array, group:Canvas, defaults:Array):void {
				
				// remove current checkboxes and replace with new ones
				while(group.numChildren > 0) {
					group.removeChildAt(0);
				}				
				
				var currY = 0;
				if(ordering.length == 0) {
					var lab:spark.components.Label = new spark.components.Label();
					lab.text = "Not enough information to filter!";
					group.addChild(lab);
				} else {
					for(var i=0;i<defaults.length;i++) {
						var cb:CheckBox = new CheckBox();
						cb.y = currY;
						cb.label = defaults[i];
						cb.setStyle("fontFamily", "Helvetica Neue Light");
						cb.addEventListener(MouseEvent.CLICK, handleFilter);
						group.addChild(cb);
						currY += 20;
					}
					
					for(var i=0;i<ordering.length;i++) {
						if(defaults.indexOf(ordering[i]) == -1) {
							var cb:CheckBox = new CheckBox();
							cb.y = currY;
							cb.label = ordering[i];
							cb.setStyle("fontFamily", "Helvetica Neue Light");
							cb.addEventListener(MouseEvent.CLICK, handleFilter);
							group.addChild(cb);
							currY += 20;
						}
					}
				}
			}
		]]>
	</fx:Script>
	<s:states>
		<s:State name="loggedout"/>
		<s:State name="loggedin"/>
	</s:states>
	<s:Button id="loginoutBtn" right="10" label="Log In" skinClass="skins.FBLogoutButtonSkin" 
			  right.loggedin="10" bottom.loggedin="10" label.loggedin="Log Out"
			  skinClass.loggedin="skins.FBLogoutButtonSkin"
			  right.loggedout="385" top.loggedout="349" label.loggedout="Log In"
			  click.loggedout="login(event)" click.loggedin="logout(event)" 
			  skinClass.loggedout="skins.FBLoginButtonSkin"/>
	<s:Label x="20" y="20"
			 color="#3B5998" fontFamily="Verdana" fontSize="36"
			 fontWeight="bold" text="face"/>
	<s:Label color="#666666" fontFamily="Verdana" fontSize="30" text="+"
			 x="104" y="22"/>
	<s:Label includeIn="loggedout" x="190" y="272" color="#888888" fontFamily="Helvetica Neue Light"
			 fontSize="36" text="You are currently not logged in."/>
	<s:Label includeIn="loggedout" x="363" y="379" color="#AAAAAA" fontFamily="Helvetica Neue Light"
			 fontSize="12" text="Please login to Facebook."/>
	
	<s:TextInput includeIn="loggedin" y="10" right="20" width="692" color="#DDDDDD" id="searchbox"
				 fontFamily="Helvetica Neue Light" fontSize="32" text="Who do you want to find?" click="searchboxClick(event)" keyDown="conductSearch(event)"/>
	<mx:Box y="18" right="40" horizontalAlign="center" verticalAlign="middle" includeIn="loggedin">
		<controls:Spinner id="spinner" tickColor="#cccccc" visible="false"/>
	</mx:Box>
	
	<s:Group id="filtersgroup" visible="false">
		<s:Label includeIn="loggedin" x="12" y="93" fontFamily="Helvetica Neue Light" fontSize="18"
				 text="Filter your results"/>
		<s:Image includeIn="loggedin" x="19" y="124" source="images/graduation-hat.png"/>
		<s:Label includeIn="loggedin" x="37" y="124" fontFamily="Helvetica Neue Light" fontSize="14"
				 text="Education"/>
		<s:Image includeIn="loggedin" x="19" y="271" source="images/marker.png"/>
		<s:Label includeIn="loggedin" x="37" y="270" fontFamily="Helvetica Neue Light" fontSize="14"
				 text="Location"/>
		<s:Image includeIn="loggedin" x="19" y="420" source="images/briefcase.png"/>
		<s:Label includeIn="loggedin" x="37" y="419" fontFamily="Helvetica Neue Light" fontSize="14"
				 text="Workplace"/>
		<!--<s:CheckBox id="ed1" includeIn="loggedin" x="37" y="149" label="Columbia"
		fontFamily="Helvetica Neue Light" click="handleFilter(event)" />
		<s:CheckBox id="ed2" includeIn="loggedin" x="37" y="169" label="NYU"
		fontFamily="Helvetica Neue Light" click="handleFilter(event)" />
		<s:CheckBox id="ed3" includeIn="loggedin" x="37" y="189" label="Brown"
		fontFamily="Helvetica Neue Light" click="handleFilter(event)" />
		<s:ComboBox id="ed4" includeIn="loggedin" x="38" y="216" width="105" fontFamily="Helvetica Neue Light">
		
		</s:ComboBox>-->
		<mx:Canvas id="edgroup" x="37" y="149" width="180" height="100" horizontalScrollPolicy="off">
			
		</mx:Canvas>
		<!--<s:CheckBox id="loc1" includeIn="loggedin" x="37" y="289" label="New York, NY"
		fontFamily="Helvetica Neue Light" click="handleFilter(event)" />
		<s:CheckBox id="loc2" includeIn="loggedin" x="37" y="309" label="Boston, MA" fontFamily="Helvetica Neue Light" click="handleFilter(event)"/>
		<s:CheckBox id="loc3" includeIn="loggedin" x="37" y="329" label="Washington, D.C." fontFamily="Helvetica Neue Light" click="handleFilter(event)"/>
		<s:ComboBox id="loc4" includeIn="loggedin" x="38" y="356" width="105" fontFamily="Helvetica Neue Light" change="handleFilter(event)">
		
		</s:ComboBox>-->
		<mx:Canvas id="locgroup" x="37" y="290" width="180" height="100" horizontalScrollPolicy="off">
			
		</mx:Canvas>
		<!--<s:CheckBox includeIn="loggedin" x="37" y="441" label="Microsoft"
		fontFamily="Helvetica Neue Light"/>
		<s:CheckBox includeIn="loggedin" x="37" y="461" label="Google" fontFamily="Helvetica Neue Light"/>
		<s:CheckBox includeIn="loggedin" x="37" y="481" label="Apple" fontFamily="Helvetica Neue Light"/>
		<s:ComboBox includeIn="loggedin" x="38" y="508" width="105" fontFamily="Helvetica Neue Light"
		itemRenderer="educationRenderer">
		<mx:ArrayList>
		<fx:String>Cornell</fx:String>
		<fx:String>MIT</fx:String>
		<fx:String>Harvard</fx:String>
		<fx:String>Dartmouth</fx:String>
		<fx:String>Penn</fx:String>
		<fx:String>Yale</fx:String>
		<fx:String>Princeton</fx:String>
		</mx:ArrayList> 
		</s:ComboBox>-->
		<mx:Canvas id="workgroup" x="37" y="440" width="180" height="100" horizontalScrollPolicy="off">
			
		</mx:Canvas>
	</s:Group>
	<mx:Canvas id="circleArea" width="620" height="500" x="200" y="60">
		

	</mx:Canvas>
	<s:Button id="nextResultsButton" label=">>" click="nextResultHandler(event)" x="780" y="60" width="50" includeIn="loggedin" visible="false">
		
	</s:Button>
</s:WindowedApplication>
